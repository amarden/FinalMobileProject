//Bootstraps our angular app
angular.module('ehrDashboard', [
    'ngAnimate',
    'ngAria',
    'ngMaterial',
    //'ui-router'
])
.config(["$mdThemingProvider", function ($mdThemingProvider) {
    $mdThemingProvider.theme('default')
      .primaryPalette('blue')
      .accentPalette('green');
}])

//Angular Service used to calculate all of the information we show on the dashboard
angular.module("ehrDashboard")
    .service("Calculate", function () {
        this.getMetrics = function (patient, provider) {
            var metric = {};
            metric.ageAverage = patient
                .map(function (d) { return d.Age })
                .reduce(function (a, b) { return a + b; })
                / patient.length;

            metric.chatAverage = patient
                .map(function (d) { return d.chatCount })
                .reduce(function (a, b) { return a + b; })
                / patient.length;

            metric.imageAverage = patient
                .map(function (d) { return d.imageCount })
                .reduce(function (a, b) { return a + b; })
                / patient.length;

            metric.providerAverage = patient
                .map(function (d) { return d.providerCount })
                .reduce(function (a, b) { return a + b; })
                / patient.length;

            var groupDiag = _.groupBy(patient, "diagnosis");
            metric.topDiagnoses = _.map(groupDiag, function (data, key) {
                return {
                    group:  key.length > 32 ? key.substring(0,32)+"..." : key,
                    number: data.length
                };
            });

            var procDiag = _.groupBy(_.flatten(patient.map(function (d) { return d.procedures; })));
            metric.topProcedures = _.map(procDiag, function (data, key) {
                return {
                    group: key,
                    number: data.length
                };
            });

            var roleGroup = _.groupBy(provider.map(function (d) { return d.Role; }));
            metric.roleCount = _.map(roleGroup, function (data, key) {
                return {
                    group: key.length > 32 ? key.substring(0,32)+"..." : key,
                    number: data.length
                };
            });

            var statusGroup = _.groupBy(patient.map(function (d) { return d.MedicalStatus; }));
            metric.statusCount = _.map(statusGroup, function (data, key) {
                return {
                    group: key,
                    number: data.length
                };
            });

            return metric;
        };
    });
//Data Service that makes the api call to our server to get dashboard data
angular.module("ehrDashboard")
    .service("Data", ["$http", function($http){
        this.getData = function () {
            return $http.get("api/Dashboard")
                .then(function (data) {
                    return data;
                });
        };
    }]);

//Angular controller that governs the business logic on our home page
angular.module("ehrDashboard")
    .controller("MainCtrl", ["Data", "Calculate", function(Data, Calculate) {
        var vm = this;
        vm.data = {};
        vm.groupDiag = "group";
        vm.unit = "number";
        //Call data service and then process data and assign it to view model
        Data.getData().then(function (data) {
            console.log(data.data);
            vm.processed = Calculate.getMetrics(data.data.patients, data.data.providers);
            console.log(vm.processed);
        });
    }]);  
angular.module("ehrDashboard")
.directive("barSpark", function(){
    return {
        restrict : 'E',
        scope: {
            data: '=',
            prop: '=',
            group: '='
        },
        template: '',
        link: function(scope, elem) {
            var drawChart = function(data,prop,group) {
                var color = d3.scale.category10();
                var div = elem[0];
                var w = div.offsetWidth;
                var h = Math.max(div.offsetHeight, 280);
                var xScale = d3.scale.linear().domain([0, Math.ceil(d3.max(data, function(d) { return d[prop]; }))]).range([0,w/1.6]);
                var yScale = d3.scale.ordinal().domain(data.map(function(d) { return d[group]; })).rangeRoundBands([10,h-50], 0.2);
                var svg = d3.select(div).append("svg").attr("height",h).attr("width",w);
                var graph = svg.append("g").attr("transform","translate(0,20)");
                var g = graph.selectAll("g").data(data)
                    .enter().append("g")
                    .attr("transform", function(d) { return "translate(30,"+yScale(d[group])+")"; });

                var xAxisNum = d3.svg.axis()
                    .scale(xScale)
                    .orient("bottom");

                svg.append("g")
                    .attr("class","x axis")
                    .attr("transform","translate(30," +(h - 25)+")")
                    .call(xAxisNum);

                g.append("rect")
                    .attr("class","spark")
                    .attr("width", function(d) { return xScale(d[prop])})
                    .attr("height", yScale.rangeBand())
                    .style("fill", "steelblue")
                    .style("stroke", "#386890")
                    .style("stroke-width",2);

                g.append("text")
                    .attr("dy", yScale.rangeBand()/2)
                    .attr("dx", 4)
                    .style("fill","white")
                    .style("font-size",12)
                    .style("text-anchor","start")
                    .text(function(d) { return d[group]; });

                g.append("text")
                    .attr("dy", yScale.rangeBand()/2)
                    .style("font-size",15)
                    .style("fill","white")
                    .attr("dx", function(d) { return (xScale(d[prop])-5); })
                    .style("text-anchor","end")
                    .text(function(d) { return d[prop]+"%"; });

                //line chart
                var parseDate = d3.time.format("%m/%d/%Y").parse;
                var xScaleTime = d3.time.scale().range([w/1.5,w-100]).domain(d3.extent(data[0].time, function(d) { return parseDate(d.quarter);}));
                var xAxis = d3.svg.axis()
                    .scale(xScaleTime)
                    .ticks(d3.time.month, 3)
                    .tickFormat(d3.time.format("%b"))
                    .orient("bottom");

                var yTimes = {};

                var line = d3.svg.line()
                    .interpolate("linear")
                    .x(function(d) { return xScaleTime(parseDate(d.quarter)); })
                    .y(function(d) { return yTimes[d.type](d[prop]); });

                g.append("path")
                    .attr("fill","none")
                    .attr("stroke","steelblue")
                    .attr("stroke-width",2)
                    .datum(function(d) {
                        if (!yTimes[d.type]) {
                            yTimes[d.type] = d3.scale.linear()
                                .range([yScale.rangeBand(),10])
                                .domain([-10, 10]);
                                //.domain([(d3.min(d.time, function(d) { return d[prop];})-1), (d3.max(d.time, function(d) { return d[prop];})+1)]);
                        }
                        return d.time;
                    })
                    .attr("d",line);

                g.append("line")
                    .style("stroke-dasharray", ("3", "3"))
                    .style("stroke", "black")
                    .attr("x1", xScaleTime.range()[0])
                    .attr("x2", xScaleTime.range()[1])
                    .attr("y1", function(d) { return yTimes[d.type](0)})
                    .attr("y2", function(d) { return yTimes[d.type](0)});

                g.append("text")
                    .attr("transform", function(d) {
                        return "translate(" + (xScaleTime.range()[1] + 16) + "," + (yTimes[d.type](0) + 5) + ")";
                    })
                    .attr("text-anchor", "middle")
                    .style("font-size", "13px")
                    .text("0%");

                g.selectAll("circle")
                    .data(function(d) { return d.time; })
                .enter().append("circle")
                    .attr("cx", function(d) {
                        return xScaleTime(parseDate(d.quarter));
                    })
                    .attr("cy", function(d) { return yTimes[d.type](d[prop]); })
                    .attr("r", "3px")
                    .attr("fill", "#386890")
                    .attr("stroke", "none");

                svg.append("g")
                    .attr("class","x axis")
                    .attr("transform","translate(30," +(h - 25)+")")
                    .call(xAxis);

                svg.append("text")
                    .attr("y", 15)
                    .attr("x", 30+(w/1.6)/2)
                    .style("text-anchor","middle")
                    .text("Prevalence of Metric - Current Quarter");

                svg.append("text")
                    .attr("y", 15)
                    .style("text-anchor","middle")
                    .attr("x",5+(w/1.6)+((w-(w/1.6))/2))
                    .text("Percent Change From Baseline");
            };

            scope.$watch('data', function() {
                if (scope.data){
                    drawChart(scope.data, scope.prop, scope.group);
                }
            }), true;
        }
    };
});

angular.module("ehrDashboard")
.directive("bubbleChart", function(){
    return {
        restrict : 'E',
        scope: {
            data: '='
        },
        template: '',
        link: function(scope, elem) {
            var drawChart = function(data) {
                var div = elem[0];
                var w = div.offsetWidth;
                var h = div.offsetHeight;
                var svg = d3.select(div).append("svg").attr("height",h).attr("width",w);
                var graph = svg.append("g").attr("transform","translate(0,20)");
                //line chart
                var xScaleTime = d3.time.scale().range([60,w-50]).domain(d3.extent(data, function(d) { return parseDate(d.date); }));
                var xAxis = d3.svg.axis()
                    .scale(xScaleTime)
                    .ticks(d3.time.month, 3)
                    .tickFormat(d3.time.format("%b"))
                    .orient("bottom");

                var yScaleTime = d3.scale.linear().range([h-50,0])
                    .domain([d3.min(types, function(d) { return d3.min(d.values, function(x) { return x.value; }); }),
                        d3.max(types, function(d) { return d3.max(d.values, function(x) { return x.value; }); })]);
                var yAxis = d3.svg.axis()
                    .scale(yScaleTime)
                    .orient("left");

                var line = d3.svg.line()
                    .interpolate("basis")
                    .x(function(d) { return xScaleTime(parseDate(d.date)); })
                    .y(function(d) { return yScaleTime(d.value); });

                graph.append("g")
                    .attr("class","x-axis")
                    .attr("transform","translate(0,"+(h-60)+")")
                    .call(xAxis);

                svg.append("g")
                    .attr("transform","translate(60,0)")
                    .attr("class", "x-axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("USD $");

                var type = svg.selectAll("g.multi")
                    .data(types)
                    .enter().append("g")
                    .attr("class","multi");

                type.append("path")
                    .attr("class", "line")
                    .attr("d", function(d) { return line(d.values); })
                    .style("stroke", function(d) { return color(d.name); })
                    .attr("fill","none");

                type.append("text")
                    .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                    .attr("transform", function(d) { return "translate(" + (xScaleTime(parseDate(d.value.date))-50) + "," + (yScaleTime(d.value.value)-10) + ")"; })
                    .attr("x", 3)
                    .attr("dy", ".35em")
                    .style("font-size",11)
                    .text(function(d) { return d.name === 'totalMoney' ? "Money Recovered" : "Money Outstanding"; });
            };

            scope.$watch('data', function() {
                if (scope.data){
                    drawChart(scope.data);
                }
            }, true);
        }
    };
});

angular.module('ehrDashboard')
    .factory("ChartOptions", function () {
    return {
        defaults: [
        { 'propName': 'margin', 'defaultValue': { "top": 0, "left": 0, "right": 0, "bottom": 0 } },
        { 'propName': 'colorScale', 'defaultValue': d3.scale.category10() },
        { 'propName': 'drawLegend', 'defaultValue': false },
        { 'propName': 'drawYAxis', 'defaultValue': false },
        { 'propName': 'tooltip', 'defaultValue': false },
        { 'propName': 'dateFormat', 'defaultValue': d3.time.format("%m/%d/%Y") },
        { 'propName': 'tickFormat', 'defaultValue': d3.time.month },
        { 'propName': 'tickSpacing', 'defaultValue': 1 },
        { 'propName': 'dateAxisFormat', 'defaultValue': d3.time.format("%m-%y") },
        { 'propName': 'timeUnit', 'defaultValue': 'month' },
        { 'propName': 'min', 'defaultValue': 'min' },
        { 'propName': 'max', 'defaultValue': 'max' },
        { 'propName': 'yScaleLabel', 'defaultValue': '' },
        { 'propName': 'title', 'defaultValue': '' },
        { 'propName': 'onClick', 'defaultValue': '' },
        ],
        generateOptions: function (options) {
            var controls = options ? options : {};
            this.defaults.forEach(function (d) {
                if (!controls.hasOwnProperty(d.propName)) {
                    controls[d.propName] = d.defaultValue;
                }
            });
            return controls;
        }
    };
});

//Adds to array prototype to add filter and aggregate options for dashboard

Array.prototype.groupByAndSum = function (groupBy, unit) {
    var group = _.groupBy(this, groupBy);
    return _.map(group, function (g, key) {
        return {
            group: key,
            unit: pmdCalcHelpers.sum(g, unit)
        };
    });
};

angular.module("ehrDashboard")
    .directive("barChart", ["BarOptions", function (BarOptions) {
        return {
            restrict: 'E',
            scope: {
                data: '=',
                options: '=',
                group: '=',
                unit: '=',
            },
            link: function (scope, elem) {
                var config = BarOptions.generateOptions(scope.options);
                config.margin.left = 250;
                var w, h;
                var y = scope.group || 'group';
                var x = scope.unit || 'unit';
                var drawn = false;
                var barTip;
                var svg;

                var createChart = function () {
                    w = config.width ? config.width : elem[0].offsetWidth;
                    h = config.height ? config.height : elem[0].offsetHeight;
                    h = 185;
                    svg = d3.select(elem[0]).append("svg")
                        .attr("width", w).attr("height", h);

                    svg.append("text")
                       .attr("class", "title")
                       .attr("dx", w / 2)
                       .attr("dy", 10)
                       .style("font-size", 10)
                       .attr("text-anchor", "middle")
                       .text(config.chartTitle);

                    svg.append("g")
                        .attr("class", "chart")
                        .attr("transform", "translate(" + config.margin.left + "," + config.margin.top + ")");

                    svg.select("g.chart").append("g")
                        .attr("class", "axis")
                        .attr("transform", "translate(0,5)");

                    if (config.tooltip) {
                        createToolTip();
                    }

                    updateChart(scope.data);
                };

                var createToolTip = function () {
                    barTip = d3.tip().attr('class', 'd3-tip')
                        .offset(function () {
                            return [0, 2];
                        })
                        .direction('e')
                        .style("text-align", "center")
                        .html(function (d) {
                            return Math.round(d[x] * 100) / 100;
                        });
                    svg.call(barTip);
                };

                var updateChart = function (data) {
                    data.sort(function (a, b) {
                        return a[y] < b[y] ? 1  : -1;
                    });

                    var yScaleHeight = Math.max(h - config.margin.top, data.length * 13);
                    if (data.length * 13 > h - config.margin.top) {
                        svg.attr("height", (data.length * 13 + config.margin.top));
                    } else {
                        svg.attr("height", h);
                    }
                    d3.select(elem[0]).style("height", h + "px");

                    var xMax = config.maxX || d3.max(data.filter(function (d) { return d[x] !== Infinity; }), function (d) { return d[x]; });
                    var xScale = d3.scale.linear()
                        .domain([0, xMax])
                        .range([0, (w - config.margin.right - config.margin.left)]);

                    var yScale = d3.scale.ordinal()
                        .domain(data.map(function (d) { return d[y]; }))
                        .rangeBands([10, yScaleHeight - config.margin.bottom], 0.05);

                    var barHeight = yScale.rangeBand();

                    var xAxis = d3.svg.axis()
                       .scale(xScale)
                       .orient("top");

                    if (config.tickNumbers) {
                        xAxis.ticks(5);
                    }

                    svg.select("g.axis")
                        .transition().duration(500)
                        .call(xAxis);

                    var barContainer = svg.select("g.chart").selectAll("g.bars")
                        .data(data, function (d) { return d[y]; });

                    barContainer.exit()
                        .transition().duration(500)
                        .delay(function (d, i) { return i * 20; })
                        .attr("transform", "translate(0," + (h + 200) + ")")
                        .remove();

                    var barEnter = barContainer.enter().append("g")
                        .attr("class", "bars")
                        .attr("transform", function (d) {
                            return "translate(0," + yScale(d[y]) + ")";
                        })
                        .style("opacity", 0);

                    barEnter.append("rect")
                        .attr("class", "bar")
                        .attr("y", 0)
                        .attr("fill", function (d) {
                            return config.colorBy === 'none' ? config.color :
                                color(d[config.colorBy]);
                        })
                        .on("mouseover", barTip.show)
                        .on("mouseout", barTip.hide);

                    barEnter.append("text")
                        .attr("class", "bar-label")
                        .attr("text-anchor", "end")
                        .attr("font-size", "12")
                        .attr("dx", -1)
                        .attr("dy", ".35em");

                    barContainer.select("rect")
                        .transition().duration(500)
                        .attr("width", function (d) {
                            return d[x] === Infinity ? 0 : xScale(d[x]);
                        })
                        .attr("height", barHeight);

                    barContainer.select("text.bar-label")
                        .transition().duration(500)
                        .attr("y", barHeight / 2)
                        .text(function (d) {
                            return d[y];
                        });

                    barContainer.transition().duration(1000)
                        .style("opacity", 1)
                        .attr("transform", function (d) { return "translate(0," + yScale(d[y]) + ")"; });
                };

                scope.$watch('data', function () {
                    if (scope.data) {
                        if (!drawn) {
                            setTimeout(function () { createChart(); }, 250);
                        } else {
                            updateChart(scope.data);
                        }
                        drawn = true;
                    }
                }, true);
            }
        };
}]);

angular.module("ehrDashboard")
    .factory("BarOptions", function () {
        return {
            defaults: [
            { 'propName': 'margin', 'defaultValue': { "top": 50, "left": 100, "right": 150, "bottom": 50 } },
            { 'propName': 'chartTitle', 'defaultValue': ""},
            { 'propName': 'color', 'defaultValue': 'steelblue' },
            { 'propName': 'colorBy', 'defaultValue': 'none' },
            { 'propName': 'tooltip', 'defaultValue': true },
            { 'propName': 'fitToHeight', 'defaultValue': true },
            { 'propName': 'tickNumbers', 'defaultValue': null },
            { 'propName': 'width', 'defaultValue': null },
            { 'propName': 'height', 'defaultValue': null },
            { 'propName': 'maxX', 'defaultValue': null }
            ],
            generateOptions: function (options) {
                var controls = options ? options : {};
                this.defaults.forEach(function (d) {
                    if (!controls.hasOwnProperty(d.propName)) {
                        controls[d.propName] = d.defaultValue;
                    }
                });
                return controls;
            }
        };
});

angular.module('ehrDashboard')
    .directive("groupBar", ["$location", function ($location) {
    return {
        restrict: 'E',
        templateNameSpace: 'svg',
        link: function (scope, elem) {
            var createChart = function (data) {
                var margin = { top: 10, right: 20, bottom: 80, left: 40 };
                var width = elem[0].offsetWidth - margin.right - margin.left;
                var height = elem[0].offsetHeight - margin.top - margin.bottom;

                console.log(width, height);
                var x0 = d3.scale.ordinal()
                    .rangeRoundBands([0, width], 0.1);

                var x1 = d3.scale.ordinal();

                var y = d3.scale.linear()
                    .range([height, 0]);

                var color = d3.scale.ordinal()
                    .range(["red", "blue", "purple"])
                    .domain(["Overhead", "Billable", "Proposal"]);

                var xAxis = d3.svg.axis()
                    .scale(x0)
                    .orient("bottom");

                var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .tickFormat(d3.format(".2s"));

                var svg = d3.select(elem[0]).append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                var options = _.uniq(_.pluck(data, 'chargeType')).sort();
                var groupByPerson = _.groupBy(data, 'employee');
                var groupedData = _.map(groupByPerson, function (d, key) {
                    return {
                        name: key,
                        empId: d[0].empId,
                        data: d
                    };
                });

                x0.domain(groupedData.map(function (d) { return d.name; }));
                x1.domain(options).rangeRoundBands([0, x0.rangeBand()]);
                y.domain([0, d3.max(groupedData, function (d) { return d3.max(d.data, function (d) { return d.hours; }); })]);

                svg.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height + ")")
                  .call(xAxis);

                svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                  .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Hours");

                var state = svg.selectAll(".state")
                    .data(groupedData)
                  .enter().append("g")
                    .attr("class", "g")
                    .attr("transform", function (d) { return "translate(" + x0(d.name) + ",0)"; })
                    .on("click", function (d) {
                        console.log(d.empId, d);
                        scope.$apply(function () {
                            $location.path("timesheet/" + d.empId);
                        });
                    });

                state.selectAll("rect")
                    .data(function (d) { return d.data; })
                  .enter().append("rect")
                    .attr("width", x1.rangeBand())
                    .attr("x", function (d) { return x1(d.chargeType); })
                    .attr("y", function (d) { return y(d.hours); })
                    .attr("height", function (d) { return height - y(d.hours); })
                    .style("fill", function (d) { return color(d.chargeType); });

                var legend = svg.selectAll(".legend")
                    .data(options.slice().reverse())
                  .enter().append("g")
                    .attr("class", "legend")
                    .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                legend.append("rect")
                    .attr("x", width - 18)
                    .attr("width", 18)
                    .attr("height", 18)
                    .style("fill", color);

                legend.append("text")
                    .attr("x", width - 24)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "end")
                    .text(function (d) { return d; });
            };

            scope.$watch('billingData', function () {
                if (scope.billingData) {
                    setTimeout(function () { createChart(scope.billingData); }, 100);
                }
            }, true);
        }
    };
}]);

angular.module('ehrDashboard')
    .directive("stackBarChart", ["$timeout", "ChartOptions", function ($timeout, ChartOptions) {
        return {
            restrict: 'E',
            scope: {
                data: '=',
                options: '=',
                date: '=',
                group: '=',
                unit: '='
            },
            link: function (scope, elem) {
                var stackBar = function () {
                    var svg, chart, width, height, yAxis;
                    var config = ChartOptions.generateOptions(scope.options);
                    var color = config.colorScale;
                    var toolTip;
                    //var formatDate = config.dateFormat;
                    var unit = scope.unit;
                    var date = scope.date;
                    var group = scope.group;
                    var stack = d3.layout.stack()
                       .values(function (d) { return d.values; })
                       .x(function (d) { return d.realDate; })
                       .y(function (d) { return d.unit; });

                    var margin = config.margin;

                    var drawYAxis = function () {
                        chart.append("g")
                            .attr("class", "y axis")
                            .attr("transform", "translate(50,0)")
                            .call(yAxis)
                          .append("text")
                            .attr("transform", "rotate(-90)")
                            .attr("y", -45)
                            .attr("dx", -(height - 100) / 2)
                            .attr("dy", ".71em")
                            .style("text-anchor", "middle")
                            .text(config.yScaleLabel);
                    };

                    var drawLegend = function (data) {
                        //Legend
                        var onlyValues = data.filter(function (d) { return d.unit !== 0; });
                        var legend = chart.selectAll(".legend")
                            .data(_.uniq(_.pluck(onlyValues, 'group')))
                          .enter().append("g")
                            .attr("class", "legend")
                            .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                        legend.append("rect")
                            .attr("x", width - 72)
                            .attr("width", 18)
                            .attr("height", 18)
                            .style("fill", color);

                        legend.append("text")
                            .attr("x", width - 96)
                            .attr("y", 9)
                            .attr("dy", ".35em")
                            .style("text-anchor", "end")
                            .text(function (d) { return d; });
                    };

                    var createToolTip = function () {
                        toolTip = d3.tip().attr('class', 'd3-tip')
                            .offset(function () {
                                return [config.toolTipAdjustTop, 0];
                            })
                            .direction('e')
                            .style("text-align", "center")
                            .html(function (d) {
                                return d.group + "<br /> " + d.unit + " " + config.toolTipUnit;
                            });
                        svg.call(toolTip);
                    };

                    var createChart = function (data) {
                        data = data.map(function (d) {
                            return {
                                unit: d[unit],
                                date: d[date],
                                group: d[group],
                                realDate: new moment(d[date])._d
                            };
                        });

                        var dates = _.uniq(data.map(function (d) { return d.date; }));
                        var categories = _.uniq(data.map(function (d) { return d.group; }));

                        dates.forEach(function (date) {
                            categories.forEach(function (cat) {
                                var match = _.find(data, function (d) { return d.date === date && d.group === cat; });
                                if (!match) {
                                    var dummy = { unit: 0, group: cat, realDate: new moment(date)._d, date: date };
                                    data.push(dummy);
                                }
                            });
                        });

                        data = _.sortBy(data, function (d) { return d.realDate; });
                        data = _.sortBy(data, function (d) { return d.group; });

                        var groups = d3.nest()
                            .key(function (d) { return d.group; }).entries(data);

                        var days = stack(groups);
                        width = elem[0].offsetWidth;
                        height = config.height ? config.height : elem[0].offsetHeight;
                        var chartHeight = height - margin.bottom;

                        svg = d3.select(elem[0]).append("svg")
                            .attr("class", "svg-chart")
                            .attr("width", width).attr("height", height);

                        chart = svg.append("g")
                            .attr("class", "chart")
                            .attr("transform", "translate(0,0)")
                            .on("mouseover", function () {
                                d3.select(this).selectAll(".to-show")
                                       .transition().duration(500)
                                       .style("opacity", 1);
                            })
                            .on("mouseout", function () {
                                d3.select(this).selectAll(".to-show")
                                    .transition().duration(500)
                                    .style("opacity", 0);
                            });

                        chart.append("text")
                            .attr("class", "title to-show")
                            .attr("dx", width / 2)
                            .attr("dy", margin.top - 10)
                            .style("font-size", 10)
                            .attr("text-anchor", "middle")
                            .text(config.titleText)
                            .style("opacity", 0);

                        var xScale = d3.scale.ordinal()
                            .rangeRoundBands([margin.left, width - margin.right], 0.08)
                            .domain(_.uniq(data.map(function (d) { return d.realDate; })));

                        var min = typeof (config.min) === 'number' ? config.min :
                            d3.min(data, function (d) { return d.unit; });

                        var totals = _.map(_.groupBy(data, 'date'),
                            function (data) { return _.reduce(data, function (m, x) { return m + x.unit; }, 0); });

                        var max = typeof (config.max) === 'number' ? config.max :
                            d3.max(totals, function (d) { return d; });

                        var yScale = d3.scale.linear()
                            .range([chartHeight, margin.top])
                            .domain([min, max]);

                        var xAxis = d3.svg.axis()
                            .scale(xScale)
                            .tickFormat(config.dateAxisFormat)
                            .orient("bottom");

                        yAxis = d3.svg.axis()
                            .scale(yScale)
                            .orient("left");

                        chart.append("g")
                            .attr("class", "x axis to-show")
                            .style("opacity", 0)
                            .attr("transform", "translate(0," + (height - margin.bottom - 5) + ")")
                            .call(xAxis);

                        // Add a group for each cause.
                        var barCont = chart.selectAll("g.day")
                            .data(days)
                          .enter().append("svg:g")
                            .attr("class", "day")
                            .style("fill", function (d) { return color(d.key); })
                            .style("stroke", function (d) { return d3.rgb(color(d.key)).darker(); });

                        // Add a rect for each date.
                        barCont.selectAll("rect")
                            .data(function (d) { return d.values; })
                          .enter().append("svg:rect")
                            .attr("x", function (d) { return xScale(d.realDate); })
                            .attr("y", function (d) { return yScale(d.y) - ((chartHeight) - yScale(d.y0)); })
                            .attr("height", function (d) { return (chartHeight) - yScale(d.y); })
                            .attr("width", xScale.rangeBand())
                            .on('mouseover', function (d) {
                                toolTip.show(d);
                            })
                            .on('mouseout', function (d) {
                                toolTip.hide(d);
                            });

                        createToolTip();
                        if (config.drawYAxis) {
                            drawYAxis(data);
                        }
                        if (config.drawLegend) {
                            drawLegend(data);
                        }
                    };

                    scope.$watch('data', function () {
                        if (scope.data) {
                            setTimeout(function () { createChart(scope.data); }, 250);
                        }
                    }, true);
                };
                $timeout(stackBar, 0);
            }
        };
    }]);

angular.module("ehrDashboard")
    .directive("vBarChart", ["BarOptions", function (BarOptions) {
        return {
            restrict: 'E',
            scope: {
                data: '=',
                options: '=',
                group: '=',
                unit: '=',
            },
            link: function (scope, elem) {
                var config = BarOptions.generateOptions(scope.options);
                var w, h;
                var y = scope.group || 'group';
                var x = scope.unit || 'unit';
                var drawn = false;
                var barTip;
                var svg;

                var createChart = function () {
                    w = config.width ? config.width : elem[0].offsetWidth;
                    h = config.height ? config.height : elem[0].offsetHeight;

                    svg = d3.select(elem[0]).append("svg")
                        .attr("width", w).attr("height", h);

                    svg.append("text")
                       .attr("class", "title")
                       .attr("dx", w / 2)
                       .attr("dy", 10)
                       .style("font-size", 10)
                       .attr("text-anchor", "middle")
                       .text(config.chartTitle);

                    svg.append("g")
                        .attr("class", "chart")
                        .attr("transform", "translate(" + config.margin.left + "," + config.margin.top + ")");

                    svg.select("g.chart").append("g")
                        .attr("class", "x-axis")
                        .attr("transform", "translate(0,5)");

                    if (config.tooltip) {
                        createToolTip();
                    }

                    updateChart(scope.data);
                };

                var createToolTip = function () {
                    barTip = d3.tip().attr('class', 'd3-tip')
                        .offset(function () {
                            return [0, 2];
                        })
                        .direction('e')
                        .style("text-align", "center")
                        .html(function (d) {
                            return Math.round(d[x] * 100) / 100;
                        });
                    svg.call(barTip);
                };

                var updateChart = function (data) {
                    data.sort(function (a, b) {
                        return a[y] < b[y] ? 1 : -1;
                    });

                    var yScaleHeight = Math.max(h - config.margin.top, data.length * 13);

                    if (data.length * 13 > h - config.margin.top) {
                        svg.attr("height", (data.length * 13 + config.margin.top));
                    }
                    else {
                        svg.attr("height", h);
                    }
                    d3.select(elem[0]).style("height", h + "px");

                    var xMax = config.maxX || d3.max(data.filter(function (d) { return d[x] !== Infinity; }), function (d) { return d[x]; });
                    var xScale = d3.scale.linear()
                        .domain([0, xMax])
                        .range([0, (w - config.margin.right - config.margin.left)]);

                    var yScale = d3.scale.ordinal()
                        .domain(data.map(function (d) { return d[y]; }))
                        .rangeBands([10, yScaleHeight - config.margin.bottom], 0.05);

                    var barHeight = yScale.rangeBand();

                    var xAxis = d3.svg.axis()
                       .scale(xScale)
                       .orient("top");

                    if (config.tickNumbers) {
                        xAxis.ticks(5);
                    }

                    //svg.select("g.x-axis")
                    //    .transition().duration(500)
                    //    .call(xAxis);

                    console.log(data, y, x);

                    var barContainer = svg.select("g.chart").selectAll("g.bars")
                        .data(data, function (d) { return d[y]; });

                    barContainer.exit()
                        .transition().duration(500)
                        .delay(function (d, i) { return i * 20; })
                        .attr("transform", "translate(0," + (h + 200) + ")")
                        .remove();

                    var barEnter = barContainer.enter().append("g")
                        .attr("class", "bars")
                        .attr("transform", function (d) {
                            return "translate(0," + yScale(d[y]) + ")";
                        })
                        .style("opacity", 0);

                    barEnter.append("rect")
                        .attr("class", "bar")
                        .attr("y", 0)
                        .attr("fill", function (d) {
                            return config.colorBy === 'none' ? config.color :
                                color(d[config.colorBy]);
                        })
                        .on("mouseover", barTip.show)
                        .on("mouseout", barTip.hide);

                    barEnter.append("text")
                        .attr("class", "bar-label")
                        .attr("text-anchor", "end")
                        .attr("font-size", "12")
                        .attr("dx", -1)
                        .attr("dy", ".35em");

                    barContainer.select("rect")
                        .transition().duration(500)
                        .attr("width", function (d) {
                            return d[x] === Infinity ? 0 : xScale(d[x]);
                        })
                        .attr("height", barHeight);

                    barContainer.select("text.bar-label")
                        .transition().duration(500)
                        .attr("y", barHeight / 2)
                        .text(function (d) {
                            return d[y];
                        });

                    barContainer.transition().duration(1000)
                        .style("opacity", 1)
                        .attr("transform", function (d) { return "translate(0," + yScale(d[y]) + ")"; });
                };

                scope.$watch('data', function () {
                    if (scope.data) {
                        if (!drawn) {
                            setTimeout(function () { createChart(); }, 250);
                        } else {
                            updateChart(scope.data);
                        }
                        drawn = true;
                    }
                }, true);
            }
        };
    }]);

angular.module('ehrDashboard')
    .directive("bulletChart", ["$timeout", function ($timeout) {
        return {
            restrict: 'E',
            scope: {
                data: '=',
                outerProp: '=',
                innerProp: '=',
                groupBy: '=',
                filter: '='
            },
            link: function (scope, elem) {
                var bulletChart = function () {
                    // directive variables
                    var svg, yScale, chart, xScale;
                    var outerProp = "staffed";
                    var innerProp = "charge";
                    var group = "project";
                    var drawn = false;
                    var monthsBack = 0;

                    var setTitle = function () {
                        var myDate = new moment().subtract("month", monthsBack).format('MMMM');
                        chart.select(".title")
                            .text(myDate + " Project Variance");
                    };

                    var createChart = function () {
                        // Set up the left side margin:
                        var margin = { top: 15, right: 50, bottom: 20, left: 40 };
                        var w = elem[0].offsetWidth;
                        var h = elem[0].offsetHeight;
                        svg = d3.select(elem[0])
                            .append("svg")
                            .attr("height", h)
                            .attr("width", w)
                            .on("mouseover", function () {
                                d3.select(this).selectAll(".to-show")
                                        .transition().duration(500)
                                        .style("opacity", 1);
                            })
                            .on("mouseout", function () {
                                d3.select(this).selectAll(".to-show")
                                    .transition().duration(500)
                                    .style("opacity", 0);
                            });

                        chart = svg.append("g")
                            .attr("transform", "translate(" + margin.left + "," + (0) + ")");

                        chart.append("text")
                            .attr("class", "backward to-show")
                            .attr("dx", -10)
                            .attr("dy", margin.top - 5)
                            .style("font-size", 10)
                            .attr("text-anchor", "middle")
                            .text('<')
                            .style("cursor", "pointer")
                            .on("click", function () {
                                scope.filter('backward');
                                monthsBack++;
                                scope.$apply();
                            })
                            .style("opacity", 0);

                        chart.append("text")
                           .attr("class", "forward to-show")
                           .attr("dx", w - margin.right - 5)
                           .attr("dy", margin.top - 5)
                           .style("font-size", 10)
                           .attr("text-anchor", "middle")
                           .text('>')
                           .style("cursor", "pointer")
                           .on("click", function () {
                               scope.filter('forward');
                               monthsBack--;
                               scope.$apply();
                           })
                           .style("opacity", 0);

                        chart.append("text")
                            .attr("class", "title to-show")
                            .attr("dx", (w - margin.right) / 2)
                            .attr("dy", margin.top - 5)
                            .style("font-size", 10)
                            .attr("text-anchor", "middle")
                            .style("opacity", 0);

                        // Set up the scales:
                        xScale = d3.scale.linear()
                            .range([0, w - margin.right]);

                        yScale = d3.scale.ordinal()
                            .rangeBands([margin.top, h - margin.bottom], 0.1);

                        //Set up axes:
                        chart.append("g")
                            .attr("class", "x axis to-show")
                            .attr("transform", "translate(0, " + (h - margin.bottom - 5) + ")")
                            .style("opacity", 0)
                            .append("text")
                            .style("font-size", "8")
                            .style("text-anchor", "middle")
                            .attr("dx", (w - margin.right) / 2)
                            .attr("dy", 25)
                            .text("Hours");
                        drawn = true;
                        updateChart(scope.data);
                    };

                    var updateChart = function (data) {
                        setTitle();
                        chart.select(".forward")
                            .style("display", function () { return monthsBack >= 1 ? "block" : "none"; });
                        chart.select(".backward")
                            .style("display", function () { return monthsBack >= 3 ? "none" : "block"; });

                        //Set up the SVG:
                        var maxX = d3.max(data, function (d) { return Math.max(d[innerProp], d[outerProp]); }) * 1.10;
                        xScale.domain([0, maxX]);

                        var xAxis = d3.svg.axis()
                           .scale(xScale)
                           .ticks(5)
                           .orient("bottom");

                        chart.select('.x')
                            .call(xAxis);

                        yScale.domain(data.map(function (d) { return d[group]; }));

                        var innerBarHeight = yScale.rangeBand() * 0.6;
                        // Data binding:
                        var barsCont = chart.selectAll("g.bars")
                            .data(data, function (d) { return d[group]; });

                        barsCont.transition().duration(500)
                            .attr("transform", function (d) { return "translate(0, " + yScale(d[group]) + ")"; });

                        barsCont.select("rect.outer-bar")
                            .attr("height", yScale.rangeBand())
                            .transition().duration(500)
                            .attr("width", function (d) { return xScale(d[outerProp]); });

                        barsCont.select("rect.inner-bar")
                           .attr("height", innerBarHeight)
                           .attr("y", (yScale.rangeBand() - innerBarHeight) / 2)
                           .transition().duration(500)
                           .attr("width", function (d) { return xScale(d[innerProp]); });

                        barsCont.select("text")
                          .attr("dy", yScale.rangeBand() / 2);
                        // Create container per observation:;
                        var barEnter = barsCont.enter().append("g")
                            .attr("class", "bars")
                            .attr("transform", function (d) { return "translate(0, " + yScale(d[group]) + ")"; });

                        // Add Outer bar
                        barEnter.append("rect")
                            .attr("class", "outer-bar")
                            .attr("height", yScale.rangeBand())
                            .attr("width", function (d) { return xScale(d[outerProp]); })
                            .attr("fill", "black")
                            .style("opacity", 0.3);

                        //Add InnerBar
                        barEnter.append("rect")
                           .attr("class", "inner-bar")
                           .attr("height", innerBarHeight)
                           .attr("y", (yScale.rangeBand() - innerBarHeight) / 2)
                           .attr("width", function (d) { return xScale(d[innerProp]); })
                           .attr("fill", "steelblue")
                           .style("opacity", 0.8);

                        // Add group name
                        barEnter.append("text")
                            .attr("class", "name-month")
                            .attr("text-anchor", "end")
                            .attr("dominant-baseline", "central")
                            .attr("font-size", "10")
                            .attr("dx", -1)
                            .attr("dy", yScale.rangeBand() / 2)
                            .text(function (d) { return d[group]; });

                        barsCont.exit().remove();
                    };

                    scope.$watch("data", function () {
                        if (scope.data && !drawn) {
                            createChart(scope.data);
                        } else {
                            updateChart(scope.data);
                        }
                    }, true);
                };
                $timeout(bulletChart, 0);
            }
        };
    }]);

angular.module("ehrDashboard")
.directive("boxWhisker", function(){
    return {
        restrict : 'E',
        scope: {
            data: '=',
            prop: '=',
            group: '='
        },
        template: '',
        link: function(scope, elem) {
            var drawChart = function(data,prop,group) {
                var div = elem[0];
                var width = div.offsetWidth / 3 - 5;
                var height = 300;

                var min = -10,
                    max = 110;

                var chart = d3.box()
                    .whiskers(iqr(1.5))
                    .width(width / 3 - 25)
                    .height(height - 15);

                chart.domain([min, max]);

                var svg = d3.select(div).selectAll('svg')
                  .data(data)
                .enter().append("svg")
                  .attr("class", "box")
                  .attr("width", width)
                  .attr("height", height)
                .append("g")
                    .attr("transform", "translate(100,10)")
                  .call(chart);

                svg.append("text")
                    .attr("transform", "translate(" + (width / 3 - 25) / 2 + "," + (height - 15) + ")")
                    .attr("text-anchor", "middle")
                    .style("font-size", "16px")
                    .text(function(d) {
                        return d.group;
                    });
            };
            var iqr = function(k) {
              return function(d, i) {
                var q1 = d.quartiles[0],
                    q3 = d.quartiles[2],
                    iqr = (q3 - q1) * k,
                    i = -1,
                    j = d.length;
                while (d[++i] < q1 - iqr);
                while (d[--j] > q3 + iqr);
                return [i, j];
              };
            }
            scope.$watch('data', function() {
                if (scope.data){
                    drawChart(scope.data, scope.prop, scope.group);
                }
            }), true;
        }
    };
});

(function() {

// Inspired by http://informationandvisualization.de/blog/box-plot
d3.box = function() {
  var width = 1,
      height = 1,
      duration = 0,
      domain = null,
      value = Number,
      whiskers = boxWhiskers,
      quartiles = boxQuartiles,
      tickFormat = null;

  // For each small multiple…
  function box(g) {
    g.each(function(d, i) {
        // LM: Replaced map(value) with unit
      d = d.unit.sort(d3.ascending);
      var g = d3.select(this),
          n = d.length,
          min = d[0],
          max = d[n - 1];

      // Compute quartiles. Must return exactly 3 elements.
      var quartileData = d.quartiles = quartiles(d);

      // Compute whiskers. Must return exactly 2 elements, or null.
      var whiskerIndices = whiskers && whiskers.call(this, d, i),
          whiskerData = whiskerIndices && whiskerIndices.map(function(i) { return d[i]; });

      // Compute outliers. If no whiskers are specified, all data are "outliers".
      // We compute the outliers as indices, so that we can join across transitions!
      var outlierIndices = whiskerIndices
          ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n))
          : d3.range(n);

      // Compute the new x-scale.
      var x1 = d3.scale.linear()
          .domain(domain && domain.call(this, d, i) || [min, max])
          .range([height, 0]);

      // Retrieve the old x-scale, if this is an update.
      var x0 = this.__chart__ || d3.scale.linear()
          .domain([0, Infinity])
          .range(x1.range());

      // Stash the new scale.
      this.__chart__ = x1;

      // Note: the box, median, and box tick elements are fixed in number,
      // so we only have to handle enter and update. In contrast, the outliers
      // and other elements are variable, so we need to exit them! Variable
      // elements also fade in and out.

      // Update center line: the vertical line spanning the whiskers.
      var center = g.selectAll("line.center")
          .data(whiskerData ? [whiskerData] : []);

      center.enter().insert("line", "rect")
          .attr("class", "center")
          .attr("x1", width / 2)
          .attr("y1", function(d) { return x0(d[0]); })
          .attr("x2", width / 2)
          .attr("y2", function(d) { return x0(d[1]); })
          .style("opacity", 1e-6)
        .transition()
          .duration(duration)
          .style("opacity", 1)
          .attr("y1", function(d) { return x1(d[0]); })
          .attr("y2", function(d) { return x1(d[1]); });

      center.transition()
          .duration(duration)
          .style("opacity", 1)
          .attr("y1", function(d) { return x1(d[0]); })
          .attr("y2", function(d) { return x1(d[1]); });

      center.exit().transition()
          .duration(duration)
          .style("opacity", 1e-6)
          .attr("y1", function(d) { return x1(d[0]); })
          .attr("y2", function(d) { return x1(d[1]); })
          .remove();

      // Update innerquartile box.
      var box = g.selectAll("rect.box")
          .data([quartileData]);

      box.enter().append("rect")
          .attr("class", "box")
          .attr("x", 0)
          .attr("y", function(d) { return x0(d[2]); })
          .attr("width", width)
          .attr("height", function(d) { return x0(d[0]) - x0(d[2]); })
        .transition()
          .duration(duration)
          .attr("y", function(d) { return x1(d[2]); })
          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

      box.transition()
          .duration(duration)
          .attr("y", function(d) { return x1(d[2]); })
          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

      // Update median line.
      var medianLine = g.selectAll("line.median")
          .data([quartileData[1]]);

      medianLine.enter().append("line")
          .attr("class", "median")
          .attr("x1", 0)
          .attr("y1", x0)
          .attr("x2", width)
          .attr("y2", x0)
        .transition()
          .duration(duration)
          .attr("y1", x1)
          .attr("y2", x1);

      medianLine.transition()
          .duration(duration)
          .attr("y1", x1)
          .attr("y2", x1);

      // Update whiskers.
      var whisker = g.selectAll("line.whisker")
          .data(whiskerData || []);

      whisker.enter().insert("line", "circle, text")
          .attr("class", "whisker")
          .attr("x1", 0)
          .attr("y1", x0)
          .attr("x2", width)
          .attr("y2", x0)
          .style("opacity", 1e-6)
        .transition()
          .duration(duration)
          .attr("y1", x1)
          .attr("y2", x1)
          .style("opacity", 1);

      whisker.transition()
          .duration(duration)
          .attr("y1", x1)
          .attr("y2", x1)
          .style("opacity", 1);

      whisker.exit().transition()
          .duration(duration)
          .attr("y1", x1)
          .attr("y2", x1)
          .style("opacity", 1e-6)
          .remove();

      // Update outliers.
      var outlier = g.selectAll("circle.outlier")
          .data(outlierIndices, Number);

      outlier.enter().insert("circle", "text")
          .attr("class", "outlier")
          .attr("r", 5)
          .attr("cx", width / 2)
          .attr("cy", function(i) { return x0(d[i]); })
          .style("opacity", 1e-6)
        .transition()
          .duration(duration)
          .attr("cy", function(i) { return x1(d[i]); })
          .style("opacity", 1);

      outlier.transition()
          .duration(duration)
          .attr("cy", function(i) { return x1(d[i]); })
          .style("opacity", 1);

      outlier.exit().transition()
          .duration(duration)
          .attr("cy", function(i) { return x1(d[i]); })
          .style("opacity", 1e-6)
          .remove();

      // Compute the tick format.
      var format = tickFormat || x1.tickFormat(8);

      // Update box ticks.
      var boxTick = g.selectAll("text.box")
          .data(quartileData);

      boxTick.enter().append("text")
          .attr("class", "box")
          .attr("dy", ".3em")
          .attr("dx", function(d, i) { return i & 1 ? 6 : -6 })
          .attr("x", function(d, i) { return i & 1 ? width : 0 })
          .attr("y", x0)
          .attr("text-anchor", function(d, i) { return i & 1 ? "start" : "end"; })
          .text(format)
        .transition()
          .duration(duration)
          .attr("y", x1);

      boxTick.transition()
          .duration(duration)
          .text(format)
          .attr("y", x1);

      // Update whisker ticks. These are handled separately from the box
      // ticks because they may or may not exist, and we want don't want
      // to join box ticks pre-transition with whisker ticks post-.
      var whiskerTick = g.selectAll("text.whisker")
          .data(whiskerData || []);

      whiskerTick.enter().append("text")
          .attr("class", "whisker")
          .attr("dy", ".3em")
          .attr("dx", 6)
          .attr("x", width)
          .attr("y", x0)
          .text(format)
          .style("opacity", 1e-6)
        .transition()
          .duration(duration)
          .attr("y", x1)
          .style("opacity", 1);

      whiskerTick.transition()
          .duration(duration)
          .text(format)
          .attr("y", x1)
          .style("opacity", 1);

      whiskerTick.exit().transition()
          .duration(duration)
          .attr("y", x1)
          .style("opacity", 1e-6)
          .remove();
    });
    d3.timer.flush();
  }

  box.width = function(x) {
    if (!arguments.length) return width;
    width = x;
    return box;
  };

  box.height = function(x) {
    if (!arguments.length) return height;
    height = x;
    return box;
  };

  box.tickFormat = function(x) {
    if (!arguments.length) return tickFormat;
    tickFormat = x;
    return box;
  };

  box.duration = function(x) {
    if (!arguments.length) return duration;
    duration = x;
    return box;
  };

  box.domain = function(x) {
    if (!arguments.length) return domain;
    domain = x == null ? x : d3.functor(x);
    return box;
  };

  box.value = function(x) {
    if (!arguments.length) return value;
    value = x;
    return box;
  };

  box.whiskers = function(x) {
    if (!arguments.length) return whiskers;
    whiskers = x;
    return box;
  };

  box.quartiles = function(x) {
    if (!arguments.length) return quartiles;
    quartiles = x;
    return box;
  };

  return box;
};

function boxWhiskers(d) {
  return [0, d.length - 1];
}

function boxQuartiles(d) {
  return [
    d3.quantile(d, .25),
    d3.quantile(d, .5),
    d3.quantile(d, .75)
  ];
}

})();

angular.module("ehrDashboard")
    .factory("LineOptions", function () {
        return {
            defaults: [
            { 'propName': 'margin', 'defaultValue': { "top": 0, "left": 0, "right": 0, "bottom": 0 } },
            { 'propName': 'color', 'defaultValue': 'steelblue' },
            { 'propName': 'xAxisFreq', 'defaultValue': '' },
            { 'propName': 'yMax', 'defaultValue': '' },
            { 'propName': 'colorBy', 'defaultValue': 'none' },
            { 'propName': 'tooltip', 'defaultValue': true },
            { 'propName': 'fitToHeight', 'defaultValue': true },
            { 'propName': 'radius', 'defaultValue': 3 },
            { 'propName': 'width', 'defaultValue': null },
            { 'propName': 'height', 'defaultValue': null },
            {'propName': 'title', 'defaultValue': ''}
            ],
            generateOptions: function (options) {
                var controls = options ? options : {};
                this.defaults.forEach(function (d) {
                    if (!controls.hasOwnProperty(d.propName)) {
                        controls[d.propName] = d.defaultValue;
                    }
                });
                return controls;
            }
        };
});

angular.module('ehrDashboard')
    .directive("lineChart", ["ChartOptions", function (ChartOptions) {
    return {
        restrict: 'E',
        scope: {
            data: '=',
            options: '=',
            date: '=',
            group: '=',
            unit: '='
        },
        link: function (scope, elem) {
            var config = ChartOptions.generateOptions(scope.options);
            var w, h;
            var unit = scope.unit;
            var date = scope.date;
            var group = scope.group;
            var drawn = false;
            var color = config.colorScale;
            var lineTip;
            var formatDate = d3.time.format("%m/%d/%Y");

            var createChart = function () {
                w = elem[0].offsetWidth;
                h = elem[0].offsetHeight;
                console.log(w, h);

                var svg = d3.select(elem[0]).append("svg")
                    .attr("class", "svg-chart")
                    .attr("width", w).attr("height", h);

                var chart = svg.append("g")
                    .attr("class", "chart")
                    .attr("transform", "translate(0,0)");

                chart.append("g")
                  .attr("class", "x-axis")
                  .attr("transform", "translate(0," + (h - 100) + ")");

                chart.append("g")
                  .attr("class", "y-axis")
                  .attr("transform", "translate(80,0)")
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -40)
                    .attr("dx", -(h - 100) / 2)
                    .attr("dy", ".71em")
                    .style("text-anchor", "middle")
                    .text(config.yScaleLabel);

                //if (config.tooltip) {
                //    createToolTip();
                //}

                updateChart(scope.data);
            };

            //var createToolTip = function () {
            //    lineTip = d3.tip().attr('class', 'd3-tip')
            //        .offset(function () {
            //            return [0, 2]
            //        })
            //        .direction('e')
            //        .style("text-align", "center")
            //        .html(function (d) {
            //            return d[x];
            //        });
            //    d3.select("svg").call(lineTip);
            //};

            var updateChart = function (data) {
                var chart =  d3.select("svg.svg-chart").select("g.chart");
                data = data.map(function (d) {
                    return {
                        unit: d[unit],
                        date: d[date],
                        group: d[group],
                        realDate: formatDate.parse(d[date])
                    };
                });

                data = _.sortBy(data, function (d) { return +d.realDate; });

                //Set up Scales
                var minVal = 0;
                var maxVal = d3.max(data, function (d) { return d.unit; });
                // give 10% buffers on both sides
                maxVal = maxVal + (maxVal * 0.05);
                var yScale = d3.scale.linear()
                    .domain([minVal, maxVal])
                    .range([(h-100), 0]);
                var xScale = d3.time.scale()
                    .range([80, w - 40])
                    .domain(d3.extent(data, function (d) { return d.realDate; }));
                var xAxis = d3.svg.axis()
                    .scale(xScale)
                    .tickFormat(d3.time.format("%m-%y"))
                    .tickPadding(6)
                    .ticks(d3.time.month, 1)
                    .orient("bottom");

                var yAxis = d3.svg.axis()
                    .scale(yScale)
                    .orient("left");

                //chart.append("line")
                //    .attr("x1", xScale(d3.min(data, function(d) { return d.realDate; })))
                //    .attr("x2", xScale(d3.max(data, function(d) { return d.realDate; })))
                //    .attr("y1", yScale(100))
                //    .attr("y2", yScale(100))
                //    .style("stroke", "black")
                //    .style("troke-width", 2)
                //    .style("stroke-dasharray", ("3, 3"));

                var groups = d3.nest()
                    .key(function (d) { return d.group; })
                    .entries(data);

                var line = d3.svg.line()
					.interpolate("linear")
					.x(function (d) { return xScale(d.realDate); })
					.y(function (d) { return yScale(d.unit); });

                 var lines = chart.selectAll("path")
                    .data(groups, function (d) { return d.key; });

                lines.transition()
                    .ease("linear")
                    .duration(1000)
                    .attr("d", function (d) { return line(d.values); });

                lines.enter().append("path")
                    .attr("class", "line")
                    .style("stroke", function (d) { return color(d.key); })
                    .style("fill", "none")
                    .style("stroke-width", 5)
                    .transition()
                    .ease("linear")
                    .duration(1000)
                    .attr("d", function (d) { return line(d.values); });

                //Axes
                d3.select("g.x-axis").call(xAxis);
                d3.select("g.y-axis").call(yAxis);

                lines.exit().remove();

                //Legend
                var legend = chart.selectAll(".legend")
                    .data(_.uniq(_.pluck(data, 'group')))
                  .enter().append("g")
                    .attr("class", "legend")
                    .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                legend.append("rect")
                    .attr("x", w - 72)
                    .attr("width", 18)
                    .attr("height", 18)
                    .style("fill", color);

                legend.append("text")
                    .attr("x", w - 96)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "end")
                    .text(function (d) { return d; });
            };

            scope.$watch('data', function () {
                if (scope.data) {
                    if (!drawn) {
                        setTimeout(function () { createChart(); }, 250);
                    } else {
                        updateChart(scope.data);
                    }
                    drawn = true;
                }
            }, true);
        }
    };
}]);

angular.module("ehrDashboard")
    .directive("simpleLineChart", ["$timeout", "LineOptions", function ($timeout, LineOptions) {
    return {
        restrict: 'E',
        scope: {
            data: '=',
            options: '=',
            date: '=',
            unit: '='
        },
        link: function (scope, elem) {
            var lineChart = function () {
                var config = LineOptions.generateOptions(scope.options);
                var w, h;
                var unit = scope.unit;
                var date = scope.date;
                var radius = config.radius;
                var lineTip, svg, xScale, yScale;
                //var formatMonth = d3.time.format("%Y-%m-%d");
                var formatMonthLabel = d3.time.format("%b-%y");

                var createChart = function (data) {
                    w = config.width ? config.width : elem[0].offsetWidth - 20;
                    h = config.height ? config.height : elem[0].offsetHeight;
                    svg = d3.select(elem[0]).append("svg")
                        .attr("class", "svg-simple-line")
                        .attr("width", w).attr("height", h)
                        .on("mouseover", function () {
                            d3.select(this).selectAll(".to-show")
                                    .transition().duration(500)
                                    .style("opacity", 1);
                        })
                        .on("mouseout", function () {
                            d3.select(this).selectAll(".to-show")
                                .transition().duration(500)
                                .style("opacity", 0);
                        });

                    var chart = svg.append("g")
                        .attr("class", "chart")
                        .attr("transform", "translate(0,0)");

                    chart.append("text")
                        .attr("class", "title to-show")
                        .attr("dx", w / 2)
                        .attr("dy", 10)
                        .style("font-size", 10)
                        .attr("text-anchor", "middle")
                        .text(config.title)
                        .style("opacity", 0);

                    chart.append("g")
                        .attr("class", "x-axis-time to-show")
                        .attr("transform", "translate(0," + (h - 25) + ")")
                        .style("opacity", 0);

                    chart.append("g")
                      .attr("class", "y-axis-time")
                      .attr("transform", "translate(80,0)");

                    if (config.tooltip) {
                        createToolTip();
                    }

                    data = data.map(function (d) {
                        return {
                            unit: d[unit],
                            //date: d[date].substring(0, 10),
                            realDate: d[date]                        };
                    });

                    data = data.sort(function (a, b) {
                        return +a.realDate - b.realDate;
                    });

                    // Set up scales
                    var minVal = 0;
                    var maxVal = d3.max(data, function (d) { return d.unit; });

                    // Give 10% buffers on both sides
                    maxVal = maxVal + (maxVal * 0.05);
                    yScale = d3.scale.linear()
                        .domain([minVal, config.yMax])
                        .range([(h - 10), 10]);
                    xScale = d3.time.scale()
                        .range([15, w-20])
                        .domain(d3.extent(data, function (d) { return d.realDate; }));

                    updateChart(data);
                };

                var createLine = function() {
                    var chart = svg.select("g.chart");

                    chart.append("line")
                        .attr("x1", 15)
                        .attr("x2", w - 20)
                        .attr("y1", yScale(config.straightLine))
                        .attr("y2", yScale(config.straightLine))
                        .style("stroke", "black")
                        .style("opacity", 0.4);

                    chart.append("text")
                        .attr("class", "to-show")
                        .attr("dx", (w - 20))
                        .attr("dy", yScale(config.straightLine) + 2)
                        .attr("font-size", 8)
                        .style("opacity", 0)
                        .text(config.straightLine + "%");
                };

                var createToolTip = function () {
                    lineTip = d3.tip().attr('class', 'd3-tip')
                        .offset(function () {
                            return [-8, 0];
                        })
                        .direction('n')
                        .style("text-align", "center")
                        .html(function (d) {
                            return Math.round(d.unit * 100) / 100;
                        });
                    svg.call(lineTip);
                };

                var updateChart = function (data) {
                    createLine();
                    var chart = svg.select("g.chart");

                    var xAxis = d3.svg.axis()
                        .scale(xScale)
                        .tickFormat(formatMonthLabel)
                        .tickPadding(6)
                        .ticks(d3.time.month, config.xAxisFreq)
                        .orient("bottom");

                    var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .ticks(6)
                        .orient("left");

                    var line = d3.svg.line()
                        .x(function (d) { return xScale(d.realDate); })
                        .y(function (d) { return yScale(d.unit); });

                    chart.append("path")
                        .datum(data)
                        .attr("class", "lines")
                        .style("stroke", config.color)
                        .transition()
                        .ease("linear")
                        .duration(1000)
                        .attr("d", function (d) { return line(d); });

                    // Axes
                    svg.select("g.x-axis-time")
                        .call(xAxis);

                    //// Axes
                    //d3.select("g.y-axis-time")
                    //    .call(yAxis);

                    //Circles
                    var circles = chart.selectAll("circle")
                        .data(data);

                    circles.enter().append("circle")
                        .style("fill", config.color)
                        .attr("r", radius)
                        .on('mouseover', function (d) {
                            d3.select(this).transition().duration(500)
                                .attr("r", (radius + (radius * 0.9)));
                            lineTip.show(d);
                        })
                        .on('mouseout', function (d) {
                            d3.select(this).transition().duration(500).attr("r", radius);
                            lineTip.hide(d);
                        });

                    circles.transition().duration(1000)
                        .ease("bounce")
                        .attr("cx", function (d) { return xScale(d.realDate); })
                        .attr("cy", function (d) { return yScale(d.unit); });

                    circles.exit().remove();
                };

                scope.$watch('data', function () {
                    if (scope.data) {
                        createChart(scope.data);
                    }
                }, true);
            };
            $timeout(lineChart, 0);
        }
    };
}]);

//# sourceMappingURL=data:application/json;base64,
